/* tslint:disable */
/* eslint-disable */
export class EthereumClient {
  free(): void;
  constructor(execution_rpc: string | null | undefined, execution_verifiable_api: string | null | undefined, consensus_rpc: string | null | undefined, network: string, checkpoint: string | null | undefined, db_type: string);
  sync(): Promise<void>;
  subscribe(sub_type: any, id: string, callback: Function): Promise<boolean>;
  unsubscribe(id: string): boolean;
  wait_synced(): Promise<void>;
  chain_id(): number;
  get_block_number(): Promise<number>;
  get_balance(addr: any, block: any): Promise<string>;
  get_transaction_by_hash(hash: string): Promise<any>;
  get_transaction_by_block_hash_and_index(hash: any, index: any): Promise<any>;
  get_transaction_by_block_number_and_index(block: any, index: any): Promise<any>;
  get_transaction_count(addr: any, block: any): Promise<number>;
  get_block_transaction_count_by_hash(hash: any): Promise<number | undefined>;
  get_block_transaction_count_by_number(block: any): Promise<number | undefined>;
  get_block_by_number(block: any, full_tx: boolean): Promise<any>;
  get_block_by_hash(hash: string, full_tx: boolean): Promise<any>;
  get_code(addr: any, block: any): Promise<string>;
  get_storage_at(address: any, slot: any, block: any): Promise<any>;
  get_proof(address: any, storage_keys: any, block: any): Promise<any>;
  call(opts: any, block: any): Promise<string>;
  estimate_gas(opts: any, block: any): Promise<number>;
  create_access_list(opts: any, block: any): Promise<any>;
  gas_price(): Promise<any>;
  max_priority_fee_per_gas(): Promise<any>;
  send_raw_transaction(tx: string): Promise<any>;
  get_transaction_receipt(tx: any): Promise<any>;
  get_block_receipts(block: any): Promise<any>;
  get_logs(filter: any): Promise<any>;
  get_filter_changes(filter_id: any): Promise<any>;
  get_filter_logs(filter_id: any): Promise<any>;
  uninstall_filter(filter_id: any): Promise<boolean>;
  new_filter(filter: any): Promise<any>;
  new_block_filter(): Promise<any>;
  new_pending_transaction_filter(): Promise<any>;
  client_version(): Promise<string>;
}
export class LineaClient {
  free(): void;
  constructor(execution_rpc: string | null | undefined, network: string);
  sync(): Promise<void>;
  wait_synced(): Promise<void>;
  chain_id(): number;
  get_block_number(): Promise<number>;
  get_balance(addr: any, block: any): Promise<string>;
  get_transaction_by_hash(hash: string): Promise<any>;
  get_transaction_by_block_hash_and_index(hash: any, index: any): Promise<any>;
  get_transaction_by_block_number_and_index(block: any, index: any): Promise<any>;
  get_transaction_count(addr: any, block: any): Promise<number>;
  get_block_transaction_count_by_hash(hash: any): Promise<number | undefined>;
  get_block_transaction_count_by_number(block: any): Promise<number | undefined>;
  get_block_by_number(block: any, full_tx: boolean): Promise<any>;
  get_block_by_hash(hash: string, full_tx: boolean): Promise<any>;
  get_code(addr: any, block: any): Promise<string>;
  get_storage_at(address: any, slot: any, block: any): Promise<any>;
  get_proof(address: any, storage_keys: any, block: any): Promise<any>;
  call(opts: any, block: any): Promise<string>;
  estimate_gas(opts: any, block: any): Promise<number>;
  create_access_list(opts: any, block: any): Promise<any>;
  gas_price(): Promise<any>;
  max_priority_fee_per_gas(): Promise<any>;
  send_raw_transaction(tx: string): Promise<any>;
  get_transaction_receipt(tx: any): Promise<any>;
  get_block_receipts(block: any): Promise<any>;
  get_logs(filter: any): Promise<any>;
  get_filter_changes(filter_id: any): Promise<any>;
  get_filter_logs(filter_id: any): Promise<any>;
  uninstall_filter(filter_id: any): Promise<boolean>;
  new_filter(filter: any): Promise<any>;
  new_block_filter(): Promise<any>;
  new_pending_transaction_filter(): Promise<any>;
  client_version(): Promise<string>;
  subscribe(sub_type: any, id: string, callback: Function): Promise<boolean>;
  unsubscribe(id: string): boolean;
}
export class OpStackClient {
  free(): void;
  constructor(execution_rpc: string | null | undefined, execution_verifiable_api: string | null | undefined, network: string);
  sync(): Promise<void>;
  wait_synced(): Promise<void>;
  chain_id(): number;
  get_block_number(): Promise<number>;
  get_balance(addr: any, block: any): Promise<string>;
  get_transaction_by_hash(hash: string): Promise<any>;
  get_transaction_by_block_hash_and_index(hash: any, index: any): Promise<any>;
  get_transaction_by_block_number_and_index(block: any, index: any): Promise<any>;
  get_transaction_count(addr: any, block: any): Promise<number>;
  get_block_transaction_count_by_hash(hash: any): Promise<number | undefined>;
  get_block_transaction_count_by_number(block: any): Promise<number | undefined>;
  get_block_by_number(block: any, full_tx: boolean): Promise<any>;
  get_block_by_hash(hash: string, full_tx: boolean): Promise<any>;
  get_code(addr: any, block: any): Promise<string>;
  get_storage_at(address: any, slot: any, block: any): Promise<any>;
  get_proof(address: any, storage_keys: any, block: any): Promise<any>;
  call(opts: any, block: any): Promise<string>;
  estimate_gas(opts: any, block: any): Promise<number>;
  create_access_list(opts: any, block: any): Promise<any>;
  gas_price(): Promise<any>;
  max_priority_fee_per_gas(): Promise<any>;
  send_raw_transaction(tx: string): Promise<any>;
  get_transaction_receipt(tx: any): Promise<any>;
  get_block_receipts(block: any): Promise<any>;
  get_logs(filter: any): Promise<any>;
  get_filter_changes(filter_id: any): Promise<any>;
  get_filter_logs(filter_id: any): Promise<any>;
  uninstall_filter(filter_id: any): Promise<boolean>;
  new_filter(filter: any): Promise<any>;
  new_block_filter(): Promise<any>;
  new_pending_transaction_filter(): Promise<any>;
  client_version(): Promise<string>;
  subscribe(sub_type: any, id: string, callback: Function): Promise<boolean>;
  unsubscribe(id: string): boolean;
}
